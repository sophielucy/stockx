type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | RETURNS
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | FLOAT
  | BOOL
  | VOID
  | STRING
  | LITERAL of (int)
  | FLOATLIT of (float)
  | STRINGLIT of (string)
  | ID of (string)
  | FUNCTION
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 47 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* EQ *);
  270 (* NEQ *);
  271 (* LT *);
  272 (* LEQ *);
  273 (* GT *);
  274 (* GEQ *);
  275 (* TRUE *);
  276 (* FALSE *);
  277 (* AND *);
  278 (* OR *);
  279 (* RETURN *);
  280 (* RETURNS *);
  281 (* IF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* WHILE *);
  285 (* INT *);
  286 (* FLOAT *);
  287 (* BOOL *);
  288 (* VOID *);
  289 (* STRING *);
  294 (* FUNCTION *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  290 (* LITERAL *);
  291 (* FLOATLIT *);
  292 (* STRINGLIT *);
  293 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\005\000\005\000\006\000\006\000\
\003\000\009\000\009\000\004\000\010\000\010\000\011\000\011\000\
\008\000\008\000\008\000\008\000\008\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\013\000\013\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\014\000\014\000\
\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\000\000\001\000\001\000\002\000\
\003\000\000\000\002\000\011\000\000\000\001\000\002\000\004\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\003\000\005\000\007\000\009\000\005\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\004\000\004\000\003\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\059\000\000\000\017\000\018\000\019\000\020\000\
\021\000\000\000\001\000\003\000\004\000\000\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\015\000\000\000\000\000\
\000\000\000\000\000\000\016\000\010\000\000\000\000\000\000\000\
\000\000\000\000\035\000\036\000\000\000\000\000\000\000\000\000\
\032\000\033\000\034\000\000\000\011\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000\023\000\000\000\
\000\000\000\000\000\000\000\000\012\000\008\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\025\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\027\000\000\000\000\000\028\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\000\000\046\000\047\000\050\000\
\030\000\020\000\021\000\049\000\083\000\086\000\087\000"

let yysindex = "\007\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\238\254\000\000\000\000\000\000\249\254\048\255\054\255\
\120\255\000\000\009\255\053\255\052\255\000\000\036\255\120\255\
\120\255\025\255\059\255\000\000\000\000\208\255\244\255\208\255\
\244\255\244\255\000\000\000\000\064\255\062\255\068\255\073\255\
\000\000\000\000\000\000\080\255\000\000\100\255\000\000\055\255\
\052\000\069\255\236\000\136\255\000\000\000\000\000\000\070\000\
\244\255\244\255\244\255\244\255\000\000\000\000\004\255\000\000\
\244\255\244\255\244\255\244\255\244\255\244\255\244\255\244\255\
\244\255\244\255\244\255\244\255\078\255\000\000\000\000\000\000\
\252\000\028\001\090\255\012\001\028\001\104\255\103\255\244\255\
\044\255\044\255\000\000\000\000\070\255\070\255\178\255\178\255\
\178\255\178\255\059\001\044\001\208\255\244\255\208\255\000\000\
\244\255\028\001\087\255\088\000\000\000\028\001\208\255\244\255\
\000\000\111\255\208\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\112\255\000\000\000\000\000\000\114\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\117\255\000\000\118\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\255\000\000\000\000\015\255\000\000\119\255\000\000\
\110\000\132\000\000\000\000\000\010\255\247\255\154\000\176\000\
\198\000\220\000\046\255\011\255\000\000\000\000\000\000\000\000\
\000\000\019\255\172\255\000\000\000\000\045\255\000\000\121\255\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\096\000\000\000\000\000\107\000\214\255\086\000\
\000\000\000\000\000\000\225\255\030\000\000\000\000\000"

let yytablesize = 589
let yytable = "\051\000\
\011\000\053\000\054\000\062\000\018\000\056\000\031\000\001\000\
\031\000\062\000\042\000\049\000\042\000\049\000\088\000\042\000\
\049\000\057\000\015\000\052\000\057\000\052\000\042\000\042\000\
\052\000\081\000\082\000\084\000\085\000\016\000\042\000\042\000\
\049\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\022\000\048\000\058\000\
\048\000\017\000\058\000\048\000\067\000\068\000\018\000\023\000\
\106\000\024\000\107\000\025\000\109\000\028\000\029\000\057\000\
\055\000\031\000\048\000\048\000\113\000\058\000\108\000\033\000\
\116\000\110\000\059\000\034\000\065\000\066\000\067\000\068\000\
\082\000\060\000\035\000\036\000\071\000\072\000\073\000\074\000\
\088\000\014\000\102\000\063\000\005\000\006\000\007\000\008\000\
\009\000\041\000\042\000\043\000\044\000\031\000\019\000\032\000\
\061\000\077\000\104\000\033\000\105\000\026\000\027\000\034\000\
\111\000\115\000\013\000\048\000\014\000\030\000\035\000\036\000\
\055\000\056\000\037\000\030\000\038\000\045\000\039\000\040\000\
\005\000\006\000\007\000\008\000\009\000\041\000\042\000\043\000\
\044\000\031\000\052\000\032\000\079\000\114\000\000\000\033\000\
\000\000\000\000\000\000\034\000\005\000\006\000\007\000\008\000\
\009\000\000\000\035\000\036\000\000\000\000\000\037\000\000\000\
\038\000\000\000\039\000\040\000\005\000\006\000\007\000\008\000\
\009\000\041\000\042\000\043\000\044\000\026\000\000\000\026\000\
\026\000\000\000\000\000\026\000\000\000\000\000\000\000\026\000\
\065\000\066\000\067\000\068\000\000\000\000\000\026\000\026\000\
\000\000\000\000\026\000\000\000\026\000\000\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\031\000\000\000\032\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\036\000\000\000\000\000\037\000\000\000\
\038\000\000\000\039\000\040\000\005\000\006\000\007\000\008\000\
\009\000\041\000\042\000\043\000\044\000\031\000\000\000\043\000\
\000\000\043\000\000\000\033\000\043\000\000\000\000\000\034\000\
\000\000\000\000\000\000\043\000\043\000\000\000\035\000\036\000\
\000\000\000\000\000\000\043\000\043\000\000\000\000\000\000\000\
\005\000\006\000\007\000\008\000\009\000\041\000\042\000\043\000\
\044\000\000\000\000\000\000\000\000\000\005\000\006\000\007\000\
\008\000\009\000\037\000\000\000\037\000\000\000\010\000\037\000\
\037\000\037\000\037\000\037\000\000\000\000\000\037\000\037\000\
\037\000\037\000\037\000\037\000\064\000\000\000\037\000\037\000\
\000\000\000\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\080\000\000\000\
\075\000\076\000\000\000\000\000\065\000\066\000\067\000\068\000\
\000\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\112\000\000\000\075\000\076\000\000\000\000\000\065\000\066\000\
\067\000\068\000\000\000\000\000\069\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\075\000\076\000\038\000\000\000\
\038\000\000\000\000\000\038\000\038\000\038\000\000\000\000\000\
\000\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\000\000\000\000\038\000\038\000\039\000\000\000\039\000\000\000\
\000\000\039\000\039\000\039\000\000\000\000\000\000\000\000\000\
\039\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
\039\000\039\000\044\000\000\000\044\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\000\000\044\000\044\000\
\045\000\000\000\045\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\045\000\045\000\046\000\000\000\
\046\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\000\000\000\000\046\000\046\000\047\000\000\000\047\000\000\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\078\000\000\000\
\047\000\047\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\101\000\000\000\
\075\000\076\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\103\000\000\000\
\075\000\076\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\076\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\000\000\000\000\
\075\000\065\000\066\000\067\000\068\000\000\000\000\000\069\000\
\070\000\071\000\072\000\073\000\074\000"

let yycheck = "\031\000\
\000\000\033\000\034\000\046\000\001\001\037\000\001\001\001\000\
\003\001\052\000\001\001\001\001\003\001\003\001\011\001\006\001\
\006\001\003\001\037\001\001\001\006\001\003\001\013\001\014\001\
\006\001\057\000\058\000\059\000\060\000\037\001\021\001\022\001\
\022\001\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\037\001\001\001\003\001\
\003\001\002\001\006\001\006\001\009\001\010\001\001\001\003\001\
\088\000\006\001\101\000\024\001\103\000\037\001\004\001\002\001\
\001\001\002\001\021\001\022\001\111\000\002\001\102\000\008\001\
\115\000\105\000\002\001\012\001\007\001\008\001\009\001\010\001\
\112\000\002\001\019\001\020\001\015\001\016\001\017\001\018\001\
\011\001\004\000\001\001\037\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\002\001\017\000\004\001\
\005\001\037\001\003\001\008\001\006\001\024\000\025\000\012\001\
\026\001\003\001\003\001\030\000\003\001\001\001\019\001\020\001\
\003\001\003\001\023\001\003\001\025\001\030\000\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\002\001\032\000\004\001\005\001\112\000\255\255\008\001\
\255\255\255\255\255\255\012\001\029\001\030\001\031\001\032\001\
\033\001\255\255\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\002\001\255\255\004\001\
\005\001\255\255\255\255\008\001\255\255\255\255\255\255\012\001\
\007\001\008\001\009\001\010\001\255\255\255\255\019\001\020\001\
\255\255\255\255\023\001\255\255\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\002\001\255\255\004\001\255\255\255\255\255\255\008\001\
\255\255\255\255\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\002\001\255\255\001\001\
\255\255\003\001\255\255\008\001\006\001\255\255\255\255\012\001\
\255\255\255\255\255\255\013\001\014\001\255\255\019\001\020\001\
\255\255\255\255\255\255\021\001\022\001\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\001\001\255\255\003\001\255\255\038\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\001\001\255\255\021\001\022\001\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\001\001\255\255\
\021\001\022\001\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\001\001\255\255\021\001\022\001\255\255\255\255\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\021\001\022\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\021\001\022\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\021\001\022\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\003\001\255\255\
\021\001\022\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\003\001\255\255\
\021\001\022\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\003\001\255\255\
\021\001\022\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  RETURNS\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VOID\000\
  STRING\000\
  FUNCTION\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  FLOATLIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 35 "parser.mly"
            ( _1 )
# 377 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                        ([],[])
# 383 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 39 "parser.mly"
                        ((_2 :: fst _1), snd _1)
# 391 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 40 "parser.mly"
                        (fst _1, (_2 :: snd _1))
# 399 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                        ( [] )
# 405 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 45 "parser.mly"
                        ( List.rev _1 )
# 412 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 48 "parser.mly"
                        ( [_1] )
# 419 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 49 "parser.mly"
                        ( _2 :: _1 )
# 427 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 52 "parser.mly"
                        ( (_1, _2) )
# 435 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                        ([])
# 441 "parser.ml"
               : 'var_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 56 "parser.mly"
                         (_2 :: _1)
# 449 "parser.ml"
               : 'var_decl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'var_decl_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 60 "parser.mly"
    ( {
        fname = _2;
        formals = _4;
        ftyp = _7;
        locals = List.rev _9;
        body = List.rev _10;
      
    } )
# 467 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                  ( [] )
# 473 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 71 "parser.mly"
                  ( List.rev _1 )
# 480 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 74 "parser.mly"
                               ( [(_1, _2)] )
# 488 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
                             ( (_3, _4) :: _1 )
# 497 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
        ( Int )
# 503 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
          ( Float )
# 509 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
         ( Bool )
# 515 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
         ( Void )
# 521 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
           ( String )
# 527 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
              ( Expr _1 )
# 534 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                ( Return Noexpr )
# 540 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                     ( Return _2 )
# 547 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 88 "parser.mly"
                            ( Block(List.rev _2) )
# 554 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 562 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                            ( If(_3, _5, _7) )
# 571 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 581 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                  ( While(_3, _5) )
# 589 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                  ( Noexpr )
# 595 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                  ( _1 )
# 602 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "parser.mly"
                     ( Literal(_1) )
# 609 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 101 "parser.mly"
                     ( FloatLit(_1) )
# 616 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                     ( StringLit(_1) )
# 623 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                     ( BoolLit(true) )
# 629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                     ( BoolLit(false) )
# 635 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                     ( Id(_1) )
# 642 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 650 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 658 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 666 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                         ( Unop(Neg, _2) )
# 745 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Unop(Not, _2) )
# 752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                         ( Assign(_1, _2, _4) )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 121 "parser.mly"
                                 ( Call(_1, _3) )
# 769 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                       ( _2 )
# 776 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                  ( [] )
# 782 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 126 "parser.mly"
                  ( List.rev _1 )
# 789 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                            ( [_1] )
# 796 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                            ( _3 :: _1 )
# 804 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
