type token =
  | INT
  | FLOAT
  | BOOL
  | STRING
  | VOID
  | NULL
  | TRUE
  | FALSE
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | AND
  | NOT
  | OR
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | RETURNS
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT_LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | ID of (string)
  | ARRAY
  | STRUCT
  | FUNCTION
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 53 "parser.ml"
let yytransl_const = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* STRING *);
  261 (* VOID *);
  262 (* NULL *);
  263 (* TRUE *);
  264 (* FALSE *);
  265 (* SEMI *);
  266 (* LPAREN *);
  267 (* RPAREN *);
  268 (* LBRACE *);
  269 (* RBRACE *);
  270 (* LBRACKET *);
  271 (* RBRACKET *);
  272 (* COMMA *);
  273 (* DOT *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* TIMES *);
  277 (* DIVIDE *);
  278 (* ASSIGN *);
  279 (* AND *);
  280 (* NOT *);
  281 (* OR *);
  282 (* EQ *);
  283 (* NEQ *);
  284 (* LT *);
  285 (* LEQ *);
  286 (* GT *);
  287 (* GEQ *);
  288 (* RETURN *);
  289 (* RETURNS *);
  290 (* IF *);
  291 (* ELSE *);
  292 (* FOR *);
  293 (* WHILE *);
  298 (* ARRAY *);
  299 (* STRUCT *);
  300 (* FUNCTION *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  294 (* INT_LITERAL *);
  295 (* FLOAT_LITERAL *);
  296 (* STRING_LITERAL *);
  297 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\003\000\003\000\006\000\
\006\000\005\000\008\000\008\000\010\000\010\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\011\000\012\000\013\000\
\015\000\016\000\016\000\016\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\014\000\014\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\018\000\
\018\000\019\000\019\000\000\000"

let yylen = "\002\000\
\003\000\000\000\001\000\001\000\002\000\000\000\001\000\001\000\
\002\000\010\000\000\000\001\000\002\000\004\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\002\000\005\000\
\006\000\000\000\001\000\003\000\002\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\002\000\004\000\002\000\006\000\
\002\000\006\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\006\000\004\000\005\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\003\000\004\000\003\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\076\000\000\000\000\000\004\000\000\000\
\015\000\017\000\016\000\019\000\018\000\048\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\046\000\047\000\000\000\020\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\067\000\068\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\009\000\000\000\
\037\000\000\000\039\000\000\000\041\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\071\000\
\032\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\000\000\027\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\025\000\040\000\022\000\028\000\042\000\000\000\034\000\
\000\000\000\000\000\000\010\000\035\000"

let yydgoto = "\002\000\
\004\000\005\000\030\000\006\000\007\000\031\000\032\000\077\000\
\033\000\079\000\125\000\034\000\035\000\084\000\036\000\126\000\
\037\000\088\000\089\000"

let yysindex = "\017\000\
\232\254\000\000\000\255\000\000\130\000\232\254\000\000\058\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\233\255\
\130\000\233\255\233\255\184\255\065\255\082\255\093\255\000\000\
\000\000\000\000\250\254\000\000\067\255\110\000\130\000\000\000\
\074\255\010\255\021\255\071\255\249\000\000\000\022\255\151\001\
\134\255\000\000\000\000\000\000\008\001\233\255\233\255\233\255\
\233\255\233\255\233\255\233\255\094\255\000\000\000\000\103\255\
\000\000\233\255\000\000\116\255\000\000\115\255\000\000\233\255\
\233\255\233\255\233\255\233\255\233\255\233\255\233\255\233\255\
\233\255\233\255\233\255\000\000\121\255\099\255\127\255\000\000\
\000\000\000\000\172\001\136\255\224\001\193\001\224\001\137\255\
\138\255\210\001\000\000\224\001\143\255\233\255\023\001\233\255\
\022\255\056\255\056\255\000\000\000\000\252\001\238\001\131\255\
\131\255\029\255\029\255\029\255\029\255\123\255\000\000\022\255\
\130\000\233\255\130\000\000\000\233\255\135\255\233\255\022\255\
\148\255\000\000\149\255\124\255\000\000\001\255\022\255\126\255\
\151\255\038\001\000\000\224\001\233\255\224\001\060\255\000\000\
\160\255\174\255\022\255\179\255\183\255\000\000\130\000\233\255\
\224\001\000\000\000\000\000\000\000\000\000\000\130\000\000\000\
\186\255\177\255\130\000\000\000\000\000"

let yyrindex = "\000\000\
\044\000\000\000\000\000\000\000\198\000\087\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\165\000\000\000\000\000\000\000\199\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\189\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\193\255\000\000\
\194\255\000\000\000\000\000\000\000\000\000\000\000\000\091\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\195\255\000\000\
\000\000\000\000\000\000\000\000\031\255\000\000\055\255\000\000\
\113\255\000\000\000\000\080\255\000\000\192\255\000\000\197\255\
\120\255\211\000\234\000\000\000\000\000\006\255\063\255\096\255\
\222\255\061\001\084\001\107\001\130\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\188\000\000\000\120\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\083\255\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\199\255\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\215\000\239\255\227\255\000\000\
\226\255\000\000\065\000\000\000\000\000\175\255\000\000\106\000\
\243\255\131\000\000\000"

let yytablesize = 795
let yytable = "\041\000\
\033\000\055\000\040\000\049\000\042\000\043\000\045\000\050\000\
\078\000\139\000\051\000\055\000\121\000\140\000\065\000\052\000\
\065\000\001\000\057\000\003\000\065\000\065\000\009\000\010\000\
\011\000\012\000\013\000\065\000\065\000\059\000\065\000\058\000\
\083\000\085\000\086\000\087\000\090\000\091\000\092\000\044\000\
\008\000\044\000\060\000\002\000\095\000\044\000\064\000\065\000\
\066\000\067\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\153\000\028\000\
\076\000\074\000\124\000\039\000\139\000\074\000\074\000\066\000\
\146\000\066\000\046\000\066\000\067\000\066\000\066\000\061\000\
\085\000\128\000\087\000\129\000\066\000\131\000\003\000\066\000\
\069\000\124\000\069\000\047\000\062\000\075\000\069\000\069\000\
\141\000\075\000\075\000\023\000\130\000\069\000\048\000\132\000\
\059\000\134\000\059\000\053\000\124\000\054\000\059\000\059\000\
\023\000\152\000\056\000\093\000\094\000\059\000\059\000\145\000\
\059\000\059\000\059\000\073\000\055\000\157\000\097\000\073\000\
\026\000\096\000\085\000\110\000\026\000\154\000\009\000\010\000\
\011\000\012\000\013\000\111\000\014\000\015\000\112\000\016\000\
\114\000\017\000\081\000\116\000\064\000\065\000\066\000\067\000\
\018\000\117\000\120\000\127\000\133\000\019\000\072\000\073\000\
\074\000\075\000\136\000\137\000\138\000\020\000\142\000\021\000\
\147\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\009\000\010\000\011\000\012\000\013\000\148\000\014\000\
\015\000\143\000\016\000\150\000\017\000\156\000\014\000\015\000\
\044\000\016\000\151\000\018\000\155\000\006\000\007\000\011\000\
\019\000\043\000\018\000\149\000\072\000\012\000\043\000\019\000\
\020\000\043\000\021\000\072\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\038\000\024\000\025\000\026\000\
\027\000\135\000\123\000\000\000\000\000\000\000\060\000\000\000\
\060\000\000\000\000\000\000\000\060\000\060\000\000\000\014\000\
\015\000\000\000\016\000\060\000\060\000\000\000\060\000\060\000\
\060\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\019\000\033\000\033\000\033\000\033\000\033\000\000\000\033\000\
\033\000\000\000\033\000\000\000\033\000\033\000\024\000\025\000\
\026\000\027\000\000\000\033\000\053\000\000\000\053\000\000\000\
\033\000\000\000\053\000\053\000\000\000\000\000\000\000\000\000\
\033\000\053\000\033\000\000\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\002\000\002\000\002\000\002\000\
\002\000\000\000\002\000\002\000\000\000\002\000\000\000\002\000\
\000\000\051\000\000\000\051\000\000\000\000\000\002\000\051\000\
\051\000\000\000\000\000\002\000\000\000\000\000\051\000\000\000\
\000\000\000\000\000\000\002\000\000\000\002\000\000\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\000\000\003\000\003\000\000\000\
\003\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
\003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\009\000\010\000\011\000\012\000\013\000\000\000\
\014\000\015\000\000\000\016\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\021\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\050\000\000\000\050\000\
\000\000\000\000\000\000\050\000\050\000\000\000\050\000\050\000\
\050\000\050\000\000\000\050\000\000\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\052\000\000\000\052\000\000\000\
\000\000\000\000\052\000\052\000\000\000\052\000\052\000\052\000\
\052\000\000\000\052\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\055\000\000\000\055\000\000\000\000\000\
\000\000\055\000\055\000\000\000\055\000\055\000\000\000\000\000\
\055\000\055\000\000\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\056\000\000\000\056\000\000\000\000\000\000\000\
\056\000\056\000\000\000\056\000\056\000\000\000\000\000\056\000\
\056\000\063\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\064\000\065\000\066\000\067\000\000\000\068\000\
\082\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\000\000\064\000\065\000\066\000\067\000\000\000\068\000\122\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\000\000\
\064\000\065\000\066\000\067\000\000\000\068\000\144\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\000\000\064\000\
\065\000\066\000\067\000\000\000\068\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\061\000\000\000\061\000\
\000\000\000\000\000\000\061\000\061\000\000\000\000\000\000\000\
\000\000\000\000\061\000\061\000\000\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\062\000\000\000\062\000\000\000\
\000\000\000\000\062\000\062\000\000\000\000\000\000\000\000\000\
\000\000\062\000\062\000\000\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\063\000\000\000\063\000\000\000\000\000\
\000\000\063\000\063\000\000\000\000\000\000\000\000\000\000\000\
\063\000\063\000\000\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\064\000\000\000\064\000\000\000\000\000\000\000\
\064\000\064\000\000\000\000\000\000\000\000\000\000\000\064\000\
\064\000\000\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\080\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\065\000\066\000\067\000\000\000\068\000\000\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\113\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\000\065\000\066\000\
\067\000\000\000\068\000\000\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\115\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\065\000\066\000\067\000\000\000\068\000\
\000\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\118\000\000\000\000\000\064\000\065\000\066\000\067\000\000\000\
\068\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\064\000\065\000\066\000\067\000\000\000\068\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\064\000\
\065\000\066\000\067\000\000\000\068\000\000\000\000\000\070\000\
\071\000\072\000\073\000\074\000\075\000\064\000\065\000\066\000\
\067\000\000\000\000\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000"

let yycheck = "\017\000\
\000\000\031\000\016\000\010\001\018\000\019\000\020\000\014\001\
\039\000\009\001\017\001\041\000\094\000\013\001\009\001\022\001\
\011\001\001\000\009\001\044\001\015\001\016\001\001\001\002\001\
\003\001\004\001\005\001\022\001\023\001\009\001\025\001\022\001\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\009\001\
\041\001\011\001\022\001\000\000\058\000\015\001\018\001\019\001\
\020\001\021\001\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\144\000\042\001\
\043\001\011\001\097\000\010\001\009\001\015\001\016\001\009\001\
\013\001\011\001\010\001\020\001\021\001\015\001\016\001\009\001\
\094\000\112\000\096\000\113\000\022\001\115\000\000\000\025\001\
\009\001\120\000\011\001\010\001\022\001\011\001\015\001\016\001\
\127\000\015\001\016\001\009\001\114\000\022\001\010\001\117\000\
\009\001\119\000\011\001\041\001\139\000\000\000\015\001\016\001\
\022\001\143\000\041\001\022\001\014\001\022\001\023\001\133\000\
\025\001\026\001\027\001\011\001\154\000\155\000\012\001\015\001\
\009\001\014\001\144\000\011\001\013\001\151\000\001\001\002\001\
\003\001\004\001\005\001\041\001\007\001\008\001\016\001\010\001\
\009\001\012\001\013\001\011\001\018\001\019\001\020\001\021\001\
\019\001\016\001\012\001\033\001\022\001\024\001\028\001\029\001\
\030\001\031\001\015\001\015\001\041\001\032\001\041\001\034\001\
\009\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\001\001\002\001\003\001\004\001\005\001\009\001\007\001\
\008\001\035\001\010\001\009\001\012\001\013\001\007\001\008\001\
\009\001\010\001\012\001\019\001\011\001\000\000\000\000\011\001\
\024\001\009\001\019\001\139\000\011\001\011\001\015\001\024\001\
\032\001\011\001\034\001\015\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\006\000\038\001\039\001\040\001\
\041\001\120\000\096\000\255\255\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\255\255\015\001\016\001\255\255\007\001\
\008\001\255\255\010\001\022\001\023\001\255\255\025\001\026\001\
\027\001\255\255\255\255\019\001\255\255\255\255\255\255\255\255\
\024\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\255\255\010\001\255\255\012\001\013\001\038\001\039\001\
\040\001\041\001\255\255\019\001\009\001\255\255\011\001\255\255\
\024\001\255\255\015\001\016\001\255\255\255\255\255\255\255\255\
\032\001\022\001\034\001\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\255\255\012\001\
\255\255\009\001\255\255\011\001\255\255\255\255\019\001\015\001\
\016\001\255\255\255\255\024\001\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\032\001\255\255\034\001\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\010\001\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\034\001\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\255\255\010\001\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\034\001\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\009\001\255\255\011\001\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\255\255\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\009\001\255\255\011\001\255\255\
\255\255\255\255\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\255\255\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\009\001\255\255\011\001\255\255\255\255\
\255\255\015\001\016\001\255\255\018\001\019\001\255\255\255\255\
\022\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\009\001\255\255\011\001\255\255\255\255\255\255\
\015\001\016\001\255\255\018\001\019\001\255\255\255\255\022\001\
\023\001\009\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\009\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\018\001\019\001\020\001\021\001\255\255\023\001\009\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\009\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\018\001\
\019\001\020\001\021\001\255\255\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\009\001\255\255\011\001\
\255\255\255\255\255\255\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\009\001\255\255\011\001\255\255\
\255\255\255\255\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\009\001\255\255\011\001\255\255\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\022\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\009\001\255\255\011\001\255\255\255\255\255\255\
\015\001\016\001\255\255\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\255\255\023\001\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\255\255\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\255\255\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\018\001\019\001\020\001\021\001\255\255\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\018\001\
\019\001\020\001\021\001\255\255\023\001\255\255\255\255\026\001\
\027\001\028\001\029\001\030\001\031\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\026\001\027\001\028\001\
\029\001\030\001\031\001"

let yynames_const = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  VOID\000\
  NULL\000\
  TRUE\000\
  FALSE\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  AND\000\
  NOT\000\
  OR\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  RETURNS\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  ARRAY\000\
  STRUCT\000\
  FUNCTION\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fdecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 39 "parser.mly"
                   ( _1, _2 )
# 469 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                        ( [] )
# 475 "parser.ml"
               : 'fdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl_list) in
    Obj.repr(
# 43 "parser.mly"
                        ( List.rev _1 )
# 482 "parser.ml"
               : 'fdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 46 "parser.mly"
                        ( [_1] )
# 489 "parser.ml"
               : 'fdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 47 "parser.mly"
                        ( _2 :: _1 )
# 497 "parser.ml"
               : 'fdecl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
                        ( [] )
# 503 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 51 "parser.mly"
                        ( List.rev _1 )
# 510 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 54 "parser.mly"
                        ( [_1] )
# 517 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 55 "parser.mly"
                        ( _2 :: _1 )
# 525 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 59 "parser.mly"
    ( {
        fname = _2;
        formals = _4;
        typ = _7;
        body = List.rev _9
    } )
# 540 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                  ( [] )
# 546 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 68 "parser.mly"
                  ( List.rev _1 )
# 553 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                             ( [(_1,_2)] )
# 561 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                             ( (_3,_4) :: _1 )
# 570 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
           ( Int )
# 576 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
           ( Bool )
# 582 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
           ( Float )
# 588 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
           ( Void )
# 594 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
           ( String )
# 600 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
           ( Array )
# 606 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
           ( Struct )
# 612 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 85 "parser.mly"
              ( Field(_1, _2))
# 620 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
  ({
    vtyp  = _1;
    vname = _2;
  })
# 631 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 96 "parser.mly"
  ({
    atype = _1;
    aname = _2;
    asize = _4;
  })
# 644 "parser.ml"
               : 'array_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    Obj.repr(
# 104 "parser.mly"
  ({
    sname = _2;
    fields = _5;
  })
# 655 "parser.ml"
               : 'struct_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                              ( [] )
# 661 "parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 111 "parser.mly"
                              ( Field(_1) )
# 668 "parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 112 "parser.mly"
                              ( _3::_1 )
# 676 "parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                                               ( Expr _1 )
# 683 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                                               ( Return Noexpr )
# 689 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                                               ( Return _2 )
# 696 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 118 "parser.mly"
                                               ( Block(List.rev _2) )
# 703 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 119 "parser.mly"
                                               ( If(_3, _5, Block([])) )
# 711 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 120 "parser.mly"
                                               ( If(_3, _5, _7) )
# 720 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 122 "parser.mly"
                                                        ( For(_3, _5, _7, _9) )
# 730 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 123 "parser.mly"
                                                        ( While(_3, _5) )
# 738 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    Obj.repr(
# 124 "parser.mly"
                                                        ( V_Decl(_1) )
# 745 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                                                          ( V_Assign(_1) )
# 753 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'array_decl) in
    Obj.repr(
# 126 "parser.mly"
                                                      ( Array_Decl(_1) )
# 760 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'array_decl) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_opt) in
    Obj.repr(
# 127 "parser.mly"
                                                          ( Array_Init(_1, _4) )
# 768 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'struct_decl) in
    Obj.repr(
# 128 "parser.mly"
                                                          ( Struct_Decl(_1) )
# 775 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'struct_decl) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'field_list) in
    Obj.repr(
# 129 "parser.mly"
                                                          ( Struct_Init(_1, _4) )
# 783 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
                  ( Noexpr )
# 789 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                  ( _1 )
# 796 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 137 "parser.mly"
                            ( Literal(_1) )
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 138 "parser.mly"
                            ( FloatLiteral(_1) )
# 810 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "parser.mly"
                            ( StringLiteral(_1) )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                            ( BoolLit(true) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                            ( BoolLit(false) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 142 "parser.mly"
                            ( Id(_1) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                                           ( Array_Assign(_1, _3, _6) )
# 845 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                              ( Array_Access(_1, _3) )
# 853 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                              ( Struct_Assign(_1, _3, _5) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                              ( Struct_Access(_1, _3) )
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                            ( Binop(_1, Add,   _3) )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                            ( Binop(_1, Sub,   _3) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                            ( Binop(_1, Mult,  _3) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                            ( Binop(_1, Div,   _3) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                            ( Binop(_1, Equal, _3) )
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                            ( Binop(_1, Neq,   _3) )
# 918 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                            ( Binop(_1, Less,  _3) )
# 926 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                            ( Binop(_1, Leq,   _3) )
# 934 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                            ( Binop(_1, Greater, _3) )
# 942 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                            ( Binop(_1, Geq,   _3) )
# 950 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                            ( Binop(_1, And,   _3) )
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                            ( Binop(_1, Or,    _3) )
# 966 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                            ( Unop(Neg, _2) )
# 973 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                            ( Unop(Not, _2) )
# 980 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                            ( Assign(_1, _3) )
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 163 "parser.mly"
                                   ( Call(_1, _3) )
# 996 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                            ( _2 )
# 1003 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "parser.mly"
                  ( [] )
# 1009 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 168 "parser.mly"
                  ( List.rev _1 )
# 1016 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                            ( [_1] )
# 1023 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                            ( _3 :: _1 )
# 1031 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
